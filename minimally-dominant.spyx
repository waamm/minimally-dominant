""" 
This code can be used to compute the set of dominant or minimally dominant elements of a conjugacy
class of a Weyl group W.
The final function in this file produces for such W a list of pairs of words (in GAP notation)
representing two elements for each (nonelliptic and nontrivial) conjugacy class of W: the first is
of minimal length and the second one is minimally dominant.

Input is:
. A Weyl group W (which in most of the auxiliary functions below is assumed to be acting on its
root lattice)

Input example:
> W = WeylGroup(["B",3])
> compute_pairs_of_min_length_and_min_dom_elts(W) 
"""


from functools import partial
is_subspace_dominant_dic = {}


def minimal_length_elt_of_subset_of_set(W, X, subset_criterion):
    ans = None
    min_length = W.long_element().length() + 1
    for x in X:
        if x.length() < min_length:
            if subset_criterion(x) == True:
                min_length = x.length()
                ans = x
    return ans


def minimal_length_elt_of_set(W, X):
    return minimal_length_elt_of_subset_of_set(W, X, lambda x: True)


def minimally_dominant_elt_of_set(W, X, is_elt_dominant):
    return minimal_length_elt_of_subset_of_set(W, X, is_elt_dominant)


def is_dominant(W, V, dominant_weyl_chamber, w):
    if w.reflection_length() == W.rank() or w.is_one():
        return True
    Vw = V_w(W, V, w)
    if Vw not in is_subspace_dominant_dic:
        is_subspace_dominant_dic[Vw] = ( Vw == V.span(intersect_closure_cone_with_subspace(
            dominant_weyl_chamber, Vw)) )
    return is_subspace_dominant_dic[Vw]


def dominant_weyl_chamber_in_root_basis(W):
    return list(CartanMatrix(W.cartan_type()).inverse().transpose())


def intersect_closure_cone_with_subspace(cone, subspace):
    intersected_cone = cone.intersection(Polyhedron(lines=subspace.basis(), base_ring=AA))
    return [ray.vector() for ray in intersected_cone.rays()]


def V_w(W, V, w):
    return V.span((w.to_matrix() - matrix.identity(W.rank())).columns())


def convert_word_from_bourbaki_to_gap(word, cartan_type):
    rk = cartan_type[1]
    if cartan_type[0] in {'B', 'C', 'D'}:
        dic = {i: rk - i + 1 for i in range(1, rk+1)}
    if cartan_type[0] in {'A', 'E', 'F', 'G'}:
        dic = {i: i for i in range(1, rk+1)}
    return [dic[word[i]] for i in range(len(word))]


def gap_word_of_elt(w, cartan_type):
    return convert_word_from_bourbaki_to_gap(w.reduced_word(), cartan_type)


def compute_pairs_of_min_length_and_min_dom_elts(W):
    W = WeylGroup(RootSystem(W.cartan_type()).root_lattice())
    V = VectorSpace(AA, W.rank())
    cartan_type = W.cartan_type()
    dominant_weyl_chamber = Polyhedron(rays=dominant_weyl_chamber_in_root_basis(W), base_ring=AA)
    is_dominant_partial = partial(is_dominant, W, V, dominant_weyl_chamber)
    L = []
    for O in W.conjugacy_classes():
        if O[0].reflection_length() not in {0, W.rank()}:
            x = minimal_length_elt_of_set(W, O)
            y = minimally_dominant_elt_of_set(W, O, is_dominant_partial)
            word_pair = tuple(gap_word_of_elt(w, cartan_type) for w in [x,y])
            L.append(word_pair)
    return L